package com.example.alcoholtracker

import android.app.Activity
import android.app.AlertDialog
import android.content.Intent
import android.content.SharedPreferences
import android.graphics.Color
import android.os.Bundle
import android.widget.*
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import java.text.SimpleDateFormat
import java.util.*
import kotlin.math.max
import android.view.Gravity

class MainActivity : Activity() {

    private lateinit var drinkButton: Button
    private lateinit var calendarButton: Button
    private lateinit var profileButton: Button
    private lateinit var resetButton: Button
    private lateinit var totalDrinksText: TextView
    private lateinit var dailyTotalText: TextView
    private lateinit var dailyAlcoholText: TextView
    private lateinit var statusText: TextView
    private lateinit var alcoholLevelText: TextView
    private lateinit var timeToSoberText: TextView
    private lateinit var weekHistoryText: TextView

    private var totalAmount = 0
    private var totalAlcoholGrams = 0.0
    private val historyList = mutableListOf<DrinkRecord>()
    private val dailyRecords = mutableMapOf<String, DailyRecord>()
    private lateinit var userProfile: UserProfile
    private lateinit var sharedPreferences: SharedPreferences

    private var firstDrinkTime: Long = 0 // –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è

    // –ö—Ä–µ–ø–æ—Å—Ç—å –Ω–∞–ø–∏—Ç–∫–æ–≤ –≤ %
    private val drinkStrength = mapOf(
        "üç∫ –ü–∏–≤–æ" to 5.0,
        "üç∑ –í–∏–Ω–æ" to 12.0,
        "ü•É –í–æ–¥–∫–∞" to 40.0,
        "üç∏ –í–∏—Å–∫–∏" to 40.0,
        "üçπ –ö–æ–∫—Ç–µ–π–ª—å" to 15.0,
        "ü•Ç –®–∞–º–ø–∞–Ω—Å–∫–æ–µ" to 11.0
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        sharedPreferences = getSharedPreferences("AlcoholTracker", MODE_PRIVATE)
        loadData()
        loadUserProfile()

        // –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ü–†–û–í–ï–†–ö–£
        println("DEBUG –ü–†–ò –ó–ê–ü–£–°–ö–ï: –í–µ—Å=${userProfile.weight}–∫–≥, –ú–µ—Ç–∞–±–æ–ª–∏–∑–º=${userProfile.metabolism}‚Ä∞/—á–∞—Å")

        initViews()
        setupClickListeners()
        updateUI()
        startTimer()
    }

    private fun initViews() {
        drinkButton = findViewById(R.id.drinkButton)
        calendarButton = findViewById(R.id.calendarButton)
        profileButton = findViewById(R.id.profileButton)
        resetButton = findViewById(R.id.resetButton)
        totalDrinksText = findViewById(R.id.totalDrinksText)
        dailyTotalText = findViewById(R.id.dailyTotalText)
        dailyAlcoholText = findViewById(R.id.dailyAlcoholText)
        statusText = findViewById(R.id.statusText)
        alcoholLevelText = findViewById(R.id.alcoholLevelText)
        timeToSoberText = findViewById(R.id.timeToSoberText)
        weekHistoryText = findViewById(R.id.weekHistoryText)
    }

    private fun setupClickListeners() {
        drinkButton.setOnClickListener {
            showDrinkDialog()
        }

        calendarButton.setOnClickListener {
            showEnhancedCalendar() // –≤–º–µ—Å—Ç–æ showCalendar()
        }

        profileButton.setOnClickListener {
            val intent = Intent(this, ProfileActivity::class.java)
            startActivity(intent)
        }

        resetButton.setOnClickListener {
            showResetConfirmationDialog()
        }
    }

    private fun showResetConfirmationDialog() {
        AlertDialog.Builder(this)
            .setTitle("–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö")
            .setMessage("–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å?")
            .setPositiveButton("–î–∞") { _, _ ->
                resetCurrentDay()
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }

    private fun showDrinkDialog() {
        val dialogView = layoutInflater.inflate(R.layout.drink_dialog, null)
        val drinkSpinner = dialogView.findViewById<Spinner>(R.id.drinkSpinner)
        val amountEditText = dialogView.findViewById<EditText>(R.id.amountEditText)
        val addButton = dialogView.findViewById<Button>(R.id.addButton)

        val drinks = arrayOf("üç∫ –ü–∏–≤–æ", "üç∑ –í–∏–Ω–æ", "ü•É –í–æ–¥–∫–∞", "üç∏ –í–∏—Å–∫–∏", "üçπ –ö–æ–∫—Ç–µ–π–ª—å", "ü•Ç –®–∞–º–ø–∞–Ω—Å–∫–æ–µ")
        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, drinks)
        drinkSpinner.adapter = adapter

        val dialog = AlertDialog.Builder(this)
            .setTitle("üéØ –ß—Ç–æ –±—É–¥–µ–º –ø–∏—Ç—å?")
            .setView(dialogView)
            .setCancelable(true)
            .create()

        addButton.setOnClickListener {
            val amountStr = amountEditText.text.toString()
            if (amountStr.isEmpty()) {
                Toast.makeText(this, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }

            try {
                val amount = amountStr.toInt()
                if (amount <= 0) {
                    Toast.makeText(this, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ", Toast.LENGTH_SHORT).show()
                    return@setOnClickListener
                }

                val selectedDrink = drinkSpinner.selectedItem.toString()
                addDrink(selectedDrink, amount)
                dialog.dismiss()
            } catch (e: NumberFormatException) {
                Toast.makeText(this, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", Toast.LENGTH_SHORT).show()
            }
        }

        dialog.show()
    }

    private fun addDrink(drink: String, amount: Int) {
        val currentTime = System.currentTimeMillis()

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        if (historyList.isEmpty()) {
            firstDrinkTime = currentTime
        }

        totalAmount += amount

        // –†–∞—Å—á–µ—Ç –∞–ª–∫–æ–≥–æ–ª—è –≤ –≥—Ä–∞–º–º–∞—Ö
        val strength = drinkStrength[drink] ?: 0.0
        val alcoholGrams = (amount * strength * 0.789) / 100
        totalAlcoholGrams += alcoholGrams

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        val record = DrinkRecord(drink, amount, currentTime, alcoholGrams)
        historyList.add(0, record)

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateDailyRecords(record)

        updateUI()
        saveData()

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –∞–ª–∫–æ–≥–æ–ª—è
        val hoursSinceFirstDrink = if (firstDrinkTime > 0) {
            (currentTime - firstDrinkTime) / (1000.0 * 60 * 60)
        } else {
            0.0
        }

        val bac = calculateBAC(totalAlcoholGrams, hoursSinceFirstDrink)
        val messages = arrayOf(
            "–ó–∞ –∑–¥–æ—Ä–æ–≤—å–µ! üçª (${"%.2f".format(bac)}‚Ä∞)",
            "–ë—É–¥—å —Å—á–∞—Å—Ç–ª–∏–≤! üòä (${"%.2f".format(bac)}‚Ä∞)",
            "–ó–∞ –ª—é–±–æ–≤—å! ‚ù§Ô∏è (${"%.2f".format(bac)}‚Ä∞)",
            "–ó–∞ –¥—Ä—É–∂–±—É! üë´ (${"%.2f".format(bac)}‚Ä∞)",
            "–ó–∞ —É—Å–ø–µ—Ö! üöÄ (${"%.2f".format(bac)}‚Ä∞)"
        )
        val randomMessage = messages.random()
        Toast.makeText(this, "$randomMessage\n+${amount} –º–ª $drink", Toast.LENGTH_LONG).show()
    }

    private fun updateDailyRecords(record: DrinkRecord) {
        val currentDate = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())
        val dailyRecord = dailyRecords[currentDate] ?: DailyRecord(currentDate, 0, 0.0, mutableListOf())

        val updatedRecord = dailyRecord.copy(
            totalAmount = dailyRecord.totalAmount + record.amount,
            totalAlcohol = dailyRecord.totalAlcohol + record.alcoholGrams,
            drinks = dailyRecord.drinks + record
        )

        dailyRecords[currentDate] = updatedRecord
    }

    private fun updateUI() {
        val currentDate = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())
        val todayRecord = dailyRecords[currentDate]

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        totalDrinksText.text = "${totalAmount} –º–ª"

        // –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        val dailyAmount = todayRecord?.totalAmount ?: 0
        val dailyAlcohol = todayRecord?.totalAlcohol ?: 0.0
        dailyTotalText.text = "–í—ã–ø–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è: ${dailyAmount} –º–ª"
        dailyAlcoholText.text = "–ß–∏—Å—Ç–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—è: ${"%.1f".format(dailyAlcohol)} –≥"

        // –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –∞–ª–∫–æ–≥–æ–ª—è –≤ –∫—Ä–æ–≤–∏ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
        val hoursSinceFirstDrink = if (firstDrinkTime > 0) {
            (System.currentTimeMillis() - firstDrinkTime) / (1000.0 * 60 * 60)
        } else {
            0.0
        }

        val bac = calculateBAC(totalAlcoholGrams, hoursSinceFirstDrink)
        alcoholLevelText.text = "üî¨ –ê–ª–∫–æ–≥–æ–ª—å –≤ –∫—Ä–æ–≤–∏: ${"%.3f".format(bac)}‚Ä∞"

        // –°—Ç–∞—Ç—É—Å –æ–ø—å—è–Ω–µ–Ω–∏—è
        val status = calculateStatus(bac)
        statusText.text = status.first
        statusText.setTextColor(status.second)

        // –í—Ä–µ–º—è –¥–æ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏
        updateTimeToSober(bac)

        // –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
        updateWeekHistory()
    }

    // üßÆ –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –∞–ª–∫–æ–≥–æ–ª—è –≤ –∫—Ä–æ–≤–∏
    private fun calculateBAC(totalAlcoholGrams: Double, hoursSinceFirstDrink: Double): Double {
        // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Ñ–æ—Ä–º—É–ª–∞ Widmark:
        // BAC = (–∞–ª–∫–æ–≥–æ–ª—å –≤ –≥—Ä–∞–º–º–∞—Ö / (–≤–µ—Å * –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)) - (–º–µ—Ç–∞–±–æ–ª–∏–∑–º * —á–∞—Å—ã)
        // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: 0.7 –¥–ª—è –º—É–∂—á–∏–Ω, 0.6 –¥–ª—è –∂–µ–Ω—â–∏–Ω

        val r = if (userProfile.isMale) 0.7 else 0.6
        val weight = userProfile.weight

        // BAC –≤ –ø—Ä–æ–º–∏–ª–ª–µ (‚Ä∞) = (–≥—Ä–∞–º–º—ã –∞–ª–∫–æ–≥–æ–ª—è / (–≤–µ—Å * r))
        val bac = totalAlcoholGrams / (weight * r)

        // –£—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç–∞–±–æ–ª–∏–∑–º (–≤—ã–≤–æ–¥ –∞–ª–∫–æ–≥–æ–ª—è)
        val metabolismEffect = userProfile.metabolism * hoursSinceFirstDrink

        return max(0.0, bac - metabolismEffect)
    }

    // üéØ –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—å—è–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–∏–ª–ª–µ
    private fun calculateStatus(bac: Double): Pair<String, Int> {
        return when {
            bac < 0.3 -> Pair("üéØ –ê–±—Å–æ–ª—é—Ç–Ω–æ —Ç—Ä–µ–∑–≤", Color.parseColor("#4ADE80"))
            bac < 0.5 -> Pair("üòä –õ–µ–≥–∫–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ", Color.parseColor("#22C55E"))
            bac < 1.0 -> Pair("üòä –õ–µ–≥–∫–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ", Color.parseColor("#EAB308"))
            bac < 1.5 -> Pair("üòÆ –°—Ä–µ–¥–Ω–µ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ", Color.parseColor("#F97316"))
            bac < 2.0 -> Pair("üö® –°–∏–ª—å–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ", Color.parseColor("#EF4444"))
            bac < 3.0 -> Pair("üíÄ –û–ø–∞—Å–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ", Color.parseColor("#DC2626"))
            else -> Pair("‚ò†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", Color.parseColor("#991B1B"))
        }
    }

    // ‚è∞ –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏
    // ‚è∞ –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏
    // ‚è∞ –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏
    private fun updateTimeToSober(currentBAC: Double) {
        if (currentBAC > 0.1) {
            // –í—Ä–µ–º—è –¥–æ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ = —Ç–µ–∫—É—â–∏–π BAC / —Å–∫–æ—Ä–æ—Å—Ç—å –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞
            val hoursToSober = currentBAC / userProfile.metabolism

            val hours = hoursToSober.toInt()
            val minutes = ((hoursToSober - hours) * 60).toInt()

            // –û–¢–õ–ê–î–ö–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò
            println("DEBUG: BAC=$currentBAC, –ú–µ—Ç–∞–±–æ–ª–∏–∑–º=${userProfile.metabolism}, –í—Ä–µ–º—è=$hoursToSober —á–∞—Å–æ–≤")
            println("DEBUG: –í–µ—Å=${userProfile.weight}–∫–≥, –ü–æ–ª=${if (userProfile.isMale) "–º—É–∂" else "–∂–µ–Ω"}")

            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if (currentBAC > 3.0) {
                timeToSoberText.text = "–û–ü–ê–°–ù–û–°–¢–¨! ${hours}—á ${minutes}–º\n–°—Ä–æ—á–Ω–æ –∫ –≤—Ä–∞—á—É! üöë"
                timeToSoberText.setTextColor(Color.parseColor("#DC2626"))
            } else if (currentBAC > 2.0) {
                timeToSoberText.text = "–û–ø–∞—Å–Ω–æ! ${hours}—á ${minutes}–º\n–í—ã–∑–æ–≤–∏—Ç–µ —Å–∫–æ—Ä—É—é! ‚ö†Ô∏è"
                timeToSoberText.setTextColor(Color.parseColor("#EF4444"))
            } else if (currentBAC > 1.0) {
                timeToSoberText.text = "–í–Ω–∏–º–∞–Ω–∏–µ! ${hours}—á ${minutes}–º\n–ù–µ —Å–∞–¥–∏—Ç–µ—Å—å –∑–∞ —Ä—É–ª—å! üöó"
                timeToSoberText.setTextColor(Color.parseColor("#F97316"))
            } else {
                timeToSoberText.text = "–î–æ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏: ${hours}—á ${minutes}–º"
                timeToSoberText.setTextColor(Color.parseColor("#F97316"))
            }
        } else {
            timeToSoberText.text = "üéØ –¢—Ä–µ–∑–≤"
            timeToSoberText.setTextColor(Color.parseColor("#4ADE80"))
        }
    }

    // üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
    private fun updateWeekHistory() {
        val calendar = Calendar.getInstance()
        val weekData = mutableListOf<Pair<String, Int>>()

        for (i in 6 downTo 0) {
            calendar.add(Calendar.DAY_OF_YEAR, -i)
            val date = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(calendar.time)
            val amount = dailyRecords[date]?.totalAmount ?: 0
            val dayName = SimpleDateFormat("EE", Locale.getDefault()).format(calendar.time)
            weekData.add(Pair(dayName, amount))
            calendar.add(Calendar.DAY_OF_YEAR, i)
        }

        val weekText = weekData.joinToString(" ‚Ä¢ ") { (day, amount) ->
            "$day: ${amount}–º–ª"
        }

        weekHistoryText.text = "üìà –ù–µ–¥–µ–ª—è: $weekText"
    }

    // üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    private fun showCalendar() {
        val calendar = Calendar.getInstance()
        val currentMonth = SimpleDateFormat("MMMM yyyy", Locale.getDefault()).format(calendar.time)

        val daysInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH)
        val calendarText = StringBuilder("üìÖ $currentMonth\n\n")

        for (day in 1..daysInMonth) {
            val dateStr = String.format("%s-%02d",
                SimpleDateFormat("yyyy-MM", Locale.getDefault()).format(calendar.time), day)
            val amount = dailyRecords[dateStr]?.totalAmount ?: 0
            if (amount > 0) {
                calendarText.append("$day —á–∏—Å–ª–æ: $amount –º–ª\n")
            }
        }

        if (calendarText.toString() == "üìÖ $currentMonth\n\n") {
            calendarText.append("–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —Ç—Ä–µ–∑–≤–æ! üéâ")
        }

        AlertDialog.Builder(this)
            .setTitle("–ö–∞–ª–µ–Ω–¥–∞—Ä—å —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è")
            .setMessage(calendarText.toString())
            .setPositiveButton("OK", null)
            .show()
    }

    // üîÑ –ü–†–ê–í–ò–õ–¨–ù–´–ô —Å–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    private fun resetCurrentDay() {
        val currentDate = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())

        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        val todayRecord = dailyRecords[currentDate]

        if (todayRecord != null) {
            // –í—ã—á–∏—Ç–∞–µ–º –∏–∑ –æ–±—â–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
            totalAmount -= todayRecord.totalAmount
            totalAlcoholGrams -= todayRecord.totalAlcohol

            // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            dailyRecords.remove(currentDate)

            // –£–¥–∞–ª—è–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            historyList.removeAll { record ->
                val recordDate = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
                    .format(Date(record.timestamp))
                recordDate == currentDate
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è
            if (historyList.isEmpty()) {
                firstDrinkTime = 0
            }

            updateUI()
            saveData()
            Toast.makeText(this, "–î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å–±—Ä–æ—à–µ–Ω—ã! üéØ", Toast.LENGTH_SHORT).show()
        } else {
            Toast.makeText(this, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —Å–±—Ä–æ—Å–∞", Toast.LENGTH_SHORT).show()
        }
    }

    // üíæ –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    private fun saveData() {
        val editor = sharedPreferences.edit()
        editor.putInt("totalAmount", totalAmount)
        editor.putFloat("totalAlcoholGrams", totalAlcoholGrams.toFloat())
        editor.putLong("firstDrinkTime", firstDrinkTime)

        val gson = Gson()
        val historyJson = gson.toJson(historyList)
        val dailyJson = gson.toJson(dailyRecords)

        editor.putString("history", historyJson)
        editor.putString("dailyRecords", dailyJson)
        editor.apply()
    }

    private fun loadData() {
        totalAmount = sharedPreferences.getInt("totalAmount", 0)
        totalAlcoholGrams = sharedPreferences.getFloat("totalAlcoholGrams", 0f).toDouble()
        firstDrinkTime = sharedPreferences.getLong("firstDrinkTime", 0)

        val gson = Gson()

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        val historyJson = sharedPreferences.getString("history", "")
        if (!historyJson.isNullOrEmpty()) {
            val type = object : TypeToken<MutableList<DrinkRecord>>() {}.type
            val loadedList = gson.fromJson<MutableList<DrinkRecord>>(historyJson, type)
            historyList.clear()
            historyList.addAll(loadedList)
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        val dailyJson = sharedPreferences.getString("dailyRecords", "")
        if (!dailyJson.isNullOrEmpty()) {
            val type = object : TypeToken<MutableMap<String, DailyRecord>>() {}.type
            val loadedDaily = gson.fromJson<MutableMap<String, DailyRecord>>(dailyJson, type)
            dailyRecords.clear()
            dailyRecords.putAll(loadedDaily)
        }
    }

    private fun loadUserProfile() {
        val gson = Gson()
        val profileJson = sharedPreferences.getString("userProfile", "")
        userProfile = if (!profileJson.isNullOrEmpty()) {
            gson.fromJson(profileJson, UserProfile::class.java)
        } else {
            UserProfile() // –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    }

    // ‚è±Ô∏è –£–ú–ù–´–ô —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    private fun startTimer() {
        Timer().scheduleAtFixedRate(object : TimerTask() {
            override fun run() {
                runOnUiThread {
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏
                    updateUI()
                    saveData()
                }
            }
        }, 0, 60000) // –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }

    // üìÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ –¥–µ—Ç–∞–ª—è–º–∏
    private fun showEnhancedCalendar() {
        val calendar = Calendar.getInstance()
        val currentYear = calendar.get(Calendar.YEAR)
        val currentMonth = calendar.get(Calendar.MONTH)

        val dialogView = layoutInflater.inflate(R.layout.calendar_dialog, null)
        val calendarTitle = dialogView.findViewById<TextView>(R.id.calendarTitle)
        val calendarGrid = dialogView.findViewById<GridLayout>(R.id.calendarGrid)
        val prevMonthButton = dialogView.findViewById<Button>(R.id.prevMonthButton)
        val nextMonthButton = dialogView.findViewById<Button>(R.id.nextMonthButton)

        val monthNames = arrayOf("–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å")

        var displayedYear = currentYear
        var displayedMonth = currentMonth

        fun updateCalendar() {
            calendarGrid.removeAllViews()
            calendarTitle.text = "${monthNames[displayedMonth]} $displayedYear"

            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            val daysOfWeek = arrayOf("–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å")
            for (day in daysOfWeek) {
                val dayView = TextView(this).apply {
                    text = day
                    textSize = 12f
                    setTextColor(Color.BLACK)
                    gravity = Gravity.CENTER
                    setPadding(4, 8, 4, 8)
                }
                calendarGrid.addView(dayView)
            }

            // –î–Ω–∏ –º–µ—Å—è—Ü–∞
            val tempCalendar = Calendar.getInstance().apply {
                set(displayedYear, displayedMonth, 1)
            }

            val daysInMonth = tempCalendar.getActualMaximum(Calendar.DAY_OF_MONTH)
            val firstDayOfWeek = tempCalendar.get(Calendar.DAY_OF_WEEK)

            // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
            val offset = (firstDayOfWeek + 5) % 7 // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
            for (i in 0 until offset) {
                calendarGrid.addView(TextView(this))
            }

            // –î–Ω–∏ –º–µ—Å—è—Ü–∞
            for (day in 1..daysInMonth) {
                val dateStr = String.format("%d-%02d-%02d", displayedYear, displayedMonth + 1, day)
                val amount = dailyRecords[dateStr]?.totalAmount ?: 0

                val dayView = TextView(this).apply {
                    text = day.toString()
                    textSize = 14f
                    gravity = Gravity.CENTER
                    setPadding(8, 12, 8, 12)

                    // –¶–≤–µ—Ç–∞: –∑–µ–ª–µ–Ω—ã–π - —Ç—Ä–µ–∑–≤–æ, –∫—Ä–∞—Å–Ω—ã–π - –ø–∏–ª–∏
                    if (amount > 0) {
                        setBackgroundColor(Color.parseColor("#FFE0E0"))
                        setTextColor(Color.parseColor("#D32F2F"))
                        setOnClickListener {
                            showDayDetails(dateStr, amount)
                        }
                    } else {
                        setBackgroundColor(Color.parseColor("#E8F5E8"))
                        setTextColor(Color.parseColor("#388E3C"))
                    }
                }
                calendarGrid.addView(dayView)
            }
        }

        prevMonthButton.setOnClickListener {
            displayedMonth--
            if (displayedMonth < 0) {
                displayedMonth = 11
                displayedYear--
            }
            updateCalendar()
        }

        nextMonthButton.setOnClickListener {
            displayedMonth++
            if (displayedMonth > 11) {
                displayedMonth = 0
                displayedYear++
            }
            updateCalendar()
        }

        updateCalendar()

        AlertDialog.Builder(this)
            .setView(dialogView)
            .setPositiveButton("–ó–∞–∫—Ä—ã—Ç—å", null)
            .show()
    }

    // üìä –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞ –¥–µ–Ω—å
    private fun showDayDetails(date: String, amount: Int) {
        val record = dailyRecords[date]
        val message = if (record != null) {
            val drinksText = record.drinks.joinToString("\n") { drink ->
                "‚Ä¢ ${drink.drink}: ${drink.amount} –º–ª (${"%.1f".format(drink.alcoholGrams)} –≥ –∞–ª–∫–æ–≥–æ–ª—è)"
            }
            "üìÖ $date\n\n" +
                    "–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: ${record.totalAmount} –º–ª\n" +
                    "–ê–ª–∫–æ–≥–æ–ª—è: ${"%.1f".format(record.totalAlcohol)} –≥\n\n" +
                    "–ù–∞–ø–∏—Ç–∫–∏:\n$drinksText"
        } else {
            "üìÖ $date\n\n–¢—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å! üéâ"
        }

        AlertDialog.Builder(this)
            .setTitle("–î–µ—Ç–∞–ª–∏ –¥–Ω—è")
            .setMessage(message)
            .setPositiveButton("OK", null)
            .show()
    }
}