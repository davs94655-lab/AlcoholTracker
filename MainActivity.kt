package com.example.alcoholtracker

import android.app.Activity
import android.app.AlertDialog
import android.content.Intent
import android.content.SharedPreferences
import android.graphics.Color
import android.os.Bundle
import android.widget.*
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : Activity() {

    private lateinit var drinkButton: Button
    private lateinit var calendarButton: Button
    private lateinit var profileButton: Button
    private lateinit var totalDrinksText: TextView
    private lateinit var dailyTotalText: TextView
    private lateinit var dailyAlcoholText: TextView
    private lateinit var statusText: TextView
    private lateinit var alcoholLevelText: TextView
    private lateinit var timeToSoberText: TextView
    private lateinit var weekHistoryText: TextView

    private var totalAmount = 0
    private var totalAlcoholGrams = 0.0
    private val historyList = mutableListOf<DrinkRecord>()
    private val dailyRecords = mutableMapOf<String, DailyRecord>()
    private lateinit var userProfile: UserProfile
    private lateinit var sharedPreferences: SharedPreferences

    // –ö—Ä–µ–ø–æ—Å—Ç—å –Ω–∞–ø–∏—Ç–∫–æ–≤ –≤ %
    private val drinkStrength = mapOf(
        "üç∫ –ü–∏–≤–æ" to 5.0,
        "üç∑ –í–∏–Ω–æ" to 12.0,
        "ü•É –í–æ–¥–∫–∞" to 40.0,
        "üç∏ –í–∏—Å–∫–∏" to 40.0,
        "üçπ –ö–æ–∫—Ç–µ–π–ª—å" to 15.0,
        "ü•Ç –®–∞–º–ø–∞–Ω—Å–∫–æ–µ" to 11.0
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        sharedPreferences = getSharedPreferences("AlcoholTracker", MODE_PRIVATE)
        loadData()
        loadUserProfile()

        initViews()
        setupClickListeners()
        updateUI()
        startTimer()
    }

    private fun initViews() {
        drinkButton = findViewById(R.id.drinkButton)
        calendarButton = findViewById(R.id.calendarButton)
        profileButton = findViewById(R.id.profileButton)
        totalDrinksText = findViewById(R.id.totalDrinksText)
        dailyTotalText = findViewById(R.id.dailyTotalText)
        dailyAlcoholText = findViewById(R.id.dailyAlcoholText)
        statusText = findViewById(R.id.statusText)
        alcoholLevelText = findViewById(R.id.alcoholLevelText)
        timeToSoberText = findViewById(R.id.timeToSoberText)
        weekHistoryText = findViewById(R.id.weekHistoryText)
    }

    private fun setupClickListeners() {
        drinkButton.setOnClickListener {
            showDrinkDialog()
        }

        calendarButton.setOnClickListener {
            showCalendar()
        }

        profileButton.setOnClickListener {
            val intent = Intent(this, ProfileActivity::class.java)
            startActivity(intent)
        }

        // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É:
        findViewById<Button>(R.id.resetButton).setOnClickListener {
            resetAll()
        }
    }

    private fun showDrinkDialog() {
        val dialogView = layoutInflater.inflate(R.layout.drink_dialog, null)
        val drinkSpinner = dialogView.findViewById<Spinner>(R.id.drinkSpinner)
        val amountEditText = dialogView.findViewById<EditText>(R.id.amountEditText)
        val addButton = dialogView.findViewById<Button>(R.id.addButton)

        val drinks = arrayOf("üç∫ –ü–∏–≤–æ", "üç∑ –í–∏–Ω–æ", "ü•É –í–æ–¥–∫–∞", "üç∏ –í–∏—Å–∫–∏", "üçπ –ö–æ–∫—Ç–µ–π–ª—å", "ü•Ç –®–∞–º–ø–∞–Ω—Å–∫–æ–µ")
        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, drinks)
        drinkSpinner.adapter = adapter

        val dialog = AlertDialog.Builder(this)
            .setTitle("üéØ –ß—Ç–æ –±—É–¥–µ–º –ø–∏—Ç—å?")
            .setView(dialogView)
            .setCancelable(true)
            .create()

        addButton.setOnClickListener {
            val amountStr = amountEditText.text.toString()
            if (amountStr.isEmpty()) {
                Toast.makeText(this, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }

            try {
                val amount = amountStr.toInt()
                val selectedDrink = drinkSpinner.selectedItem.toString()
                addDrink(selectedDrink, amount)
                dialog.dismiss()
            } catch (e: NumberFormatException) {
                Toast.makeText(this, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", Toast.LENGTH_SHORT).show()
            }
        }

        dialog.show()
    }

    private fun addDrink(drink: String, amount: Int) {
        totalAmount += amount

        // –†–∞—Å—á–µ—Ç –∞–ª–∫–æ–≥–æ–ª—è –≤ –≥—Ä–∞–º–º–∞—Ö
        val strength = drinkStrength[drink] ?: 0.0
        val alcoholGrams = (amount * strength * 0.789) / 100
        totalAlcoholGrams += alcoholGrams

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        val record = DrinkRecord(drink, amount, System.currentTimeMillis(), alcoholGrams)
        historyList.add(0, record)

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateDailyRecords(record)

        updateUI()
        saveData()

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –∞–ª–∫–æ–≥–æ–ª—è
        val bac = calculateBAC(totalAlcoholGrams)
        val messages = arrayOf(
            "–ó–∞ –∑–¥–æ—Ä–æ–≤—å–µ! üçª (${"%.2f".format(bac)}‚Ä∞)",
            "–ë—É–¥—å —Å—á–∞—Å—Ç–ª–∏–≤! üòä (${"%.2f".format(bac)}‚Ä∞)",
            "–ó–∞ –ª—é–±–æ–≤—å! ‚ù§Ô∏è (${"%.2f".format(bac)}‚Ä∞)",
            "–ó–∞ –¥—Ä—É–∂–±—É! üë´ (${"%.2f".format(bac)}‚Ä∞)",
            "–ó–∞ —É—Å–ø–µ—Ö! üöÄ (${"%.2f".format(bac)}‚Ä∞)"
        )
        val randomMessage = messages.random()
        Toast.makeText(this, "$randomMessage\n+${amount} –º–ª $drink", Toast.LENGTH_LONG).show()
    }

    private fun updateDailyRecords(record: DrinkRecord) {
        val currentDate = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())
        val dailyRecord = dailyRecords[currentDate] ?: DailyRecord(currentDate, 0, 0.0, mutableListOf())

        val updatedRecord = dailyRecord.copy(
            totalAmount = dailyRecord.totalAmount + record.amount,
            totalAlcohol = dailyRecord.totalAlcohol + record.alcoholGrams,
            drinks = dailyRecord.drinks + record
        )

        dailyRecords[currentDate] = updatedRecord
    }

    private fun updateUI() {
        val currentDate = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())
        val todayRecord = dailyRecords[currentDate]

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        totalDrinksText.text = "${totalAmount} –º–ª"

        // –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        val dailyAmount = todayRecord?.totalAmount ?: 0
        val dailyAlcohol = todayRecord?.totalAlcohol ?: 0.0
        dailyTotalText.text = "–í—ã–ø–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è: ${dailyAmount} –º–ª"
        dailyAlcoholText.text = "–ß–∏—Å—Ç–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—è: ${"%.1f".format(dailyAlcohol)} –≥"

        // –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –∞–ª–∫–æ–≥–æ–ª—è –≤ –∫—Ä–æ–≤–∏
        val bac = calculateBAC(totalAlcoholGrams)
        alcoholLevelText.text = "üî¨ –ê–ª–∫–æ–≥–æ–ª—å –≤ –∫—Ä–æ–≤–∏: ${"%.3f".format(bac)}‚Ä∞"

        // –°—Ç–∞—Ç—É—Å –æ–ø—å—è–Ω–µ–Ω–∏—è
        val status = calculateStatus(bac)
        statusText.text = status.first
        statusText.setTextColor(status.second)

        // –í—Ä–µ–º—è –¥–æ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏
        updateTimeToSober()

        // –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
        updateWeekHistory()
    }

    // üßÆ –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –∞–ª–∫–æ–≥–æ–ª—è –≤ –∫—Ä–æ–≤–∏ (–ø—Ä–æ–º–∏–ª–ª–µ)
    private fun calculateBAC(totalAlcoholGrams: Double): Double {
        // –§–æ—Ä–º—É–ª–∞ –í–∏–¥–º–∞—Ä–∫–∞: BAC = (A / (r * W)) * 100
        // A - –º–∞—Å—Å–∞ —á–∏—Å—Ç–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—è –≤ –≥—Ä–∞–º–º–∞—Ö
        // r - —Ñ–∞–∫—Ç–æ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (0.68 –¥–ª—è –º—É–∂—á–∏–Ω, 0.55 –¥–ª—è –∂–µ–Ω—â–∏–Ω)
        // W - –º–∞—Å—Å–∞ —Ç–µ–ª–∞ –≤ –≥—Ä–∞–º–º–∞—Ö

        val r = if (userProfile.isMale) 0.68 else 0.55
        val weightGrams = userProfile.weight * 1000

        return (totalAlcoholGrams / (r * weightGrams)) * 100
    }

    // üéØ –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—å—è–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–∏–ª–ª–µ
    private fun calculateStatus(bac: Double): Pair<String, Int> {
        return when {
            bac < 0.3 -> Pair("üéØ –ê–±—Å–æ–ª—é—Ç–Ω–æ —Ç—Ä–µ–∑–≤", Color.parseColor("#4ADE80"))
            bac < 0.5 -> Pair("üòä –õ–µ–≥–∫–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ", Color.parseColor("#22C55E"))
            bac < 1.0 -> Pair("üòé –õ–µ–≥–∫–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ", Color.parseColor("#EAB308"))
            bac < 1.5 -> Pair("üòÆ –°—Ä–µ–¥–Ω–µ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ", Color.parseColor("#F97316"))
            bac < 2.5 -> Pair("üö® –°–∏–ª—å–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ", Color.parseColor("#EF4444"))
            bac < 3.0 -> Pair("üíÄ –û–ø–∞—Å–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ", Color.parseColor("#DC2626"))
            else -> Pair("‚ò†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", Color.parseColor("#991B1B"))
        }
    }

    // ‚è∞ –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏
    private fun updateTimeToSober() {
        val bac = calculateBAC(totalAlcoholGrams)
        if (bac > 0.1) {
            // –°–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞ –∞–ª–∫–æ–≥–æ–ª—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ –∏ –≤–µ—Å–∞
            val eliminationRate = userProfile.metabolism * userProfile.weight
            val hoursToSober = (bac * 10) / eliminationRate

            val hours = hoursToSober.toInt()
            val minutes = ((hoursToSober - hours) * 60).toInt()

            timeToSoberText.text = "${hours}—á ${minutes}–º"
            timeToSoberText.setTextColor(Color.parseColor("#F97316"))
        } else {
            timeToSoberText.text = "–¢—Ä–µ–∑–≤"
            timeToSoberText.setTextColor(Color.parseColor("#4ADE80"))
        }
    }

    // üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
    private fun updateWeekHistory() {
        val calendar = Calendar.getInstance()
        val weekData = mutableListOf<Pair<String, Int>>()

        for (i in 6 downTo 0) {
            calendar.add(Calendar.DAY_OF_YEAR, -i)
            val date = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(calendar.time)
            val amount = dailyRecords[date]?.totalAmount ?: 0
            val dayName = SimpleDateFormat("EE", Locale.getDefault()).format(calendar.time)
            weekData.add(Pair(dayName, amount))
            calendar.add(Calendar.DAY_OF_YEAR, i) // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        }

        val weekText = weekData.joinToString(" ‚Ä¢ ") { (day, amount) ->
            "$day: ${amount}–º–ª"
        }

        weekHistoryText.text = "üìà –ù–µ–¥–µ–ª—è: $weekText"
    }

    // üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    private fun showCalendar() {
        val calendar = Calendar.getInstance()
        val currentMonth = SimpleDateFormat("MMMM yyyy", Locale.getDefault()).format(calendar.time)

        val daysInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH)
        val calendarText = StringBuilder("üìÖ $currentMonth\n\n")

        for (day in 1..daysInMonth) {
            val dateStr = String.format("%s-%02d",
                SimpleDateFormat("yyyy-MM", Locale.getDefault()).format(calendar.time), day)
            val amount = dailyRecords[dateStr]?.totalAmount ?: 0
            if (amount > 0) {
                calendarText.append("$day —á–∏—Å–ª–æ: $amount –º–ª\n")
            }
        }

        if (calendarText.toString() == "üìÖ $currentMonth\n\n") {
            calendarText.append("–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —Ç—Ä–µ–∑–≤–æ! üéâ")
        }

        AlertDialog.Builder(this)
            .setTitle("–ö–∞–ª–µ–Ω–¥–∞—Ä—å —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è")
            .setMessage(calendarText.toString())
            .setPositiveButton("OK", null)
            .show()
    }

    // üíæ –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    private fun saveData() {
        val editor = sharedPreferences.edit()
        editor.putInt("totalAmount", totalAmount)
        editor.putFloat("totalAlcoholGrams", totalAlcoholGrams.toFloat())

        val gson = Gson()
        val historyJson = gson.toJson(historyList)
        val dailyJson = gson.toJson(dailyRecords)

        editor.putString("history", historyJson)
        editor.putString("dailyRecords", dailyJson)
        editor.apply()
    }

    private fun loadData() {
        totalAmount = sharedPreferences.getInt("totalAmount", 0)
        totalAlcoholGrams = sharedPreferences.getFloat("totalAlcoholGrams", 0f).toDouble()

        val gson = Gson()

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        val historyJson = sharedPreferences.getString("history", "")
        if (!historyJson.isNullOrEmpty()) {
            val type = object : TypeToken<MutableList<DrinkRecord>>() {}.type
            val loadedList = gson.fromJson<MutableList<DrinkRecord>>(historyJson, type)
            historyList.clear()
            historyList.addAll(loadedList)
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        val dailyJson = sharedPreferences.getString("dailyRecords", "")
        if (!dailyJson.isNullOrEmpty()) {
            val type = object : TypeToken<MutableMap<String, DailyRecord>>() {}.type
            val loadedDaily = gson.fromJson<MutableMap<String, DailyRecord>>(dailyJson, type)
            dailyRecords.clear()
            dailyRecords.putAll(loadedDaily)
        }
    }

    private fun loadUserProfile() {
        val gson = Gson()
        val profileJson = sharedPreferences.getString("userProfile", "")
        userProfile = if (!profileJson.isNullOrEmpty()) {
            gson.fromJson(profileJson, UserProfile::class.java)
        } else {
            UserProfile() // –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    }

    // ‚è±Ô∏è –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    private fun startTimer() {
        Timer().scheduleAtFixedRate(object : TimerTask() {
            override fun run() {
                runOnUiThread {
                    updateTimeToSober()
                    // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–ª–∫–æ–≥–æ–ª—è
                    if (totalAlcoholGrams > 0) {
                        val elimination = userProfile.metabolism * userProfile.weight * 0.001
                        totalAlcoholGrams = maxOf(0.0, totalAlcoholGrams - elimination)
                        updateUI()
                        saveData()
                    }
                }
            }
        }, 0, 60000) // –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }
    private fun resetAll() {
        totalAmount = 0
        totalAlcoholGrams = 0.0
        historyList.clear()
        dailyRecords.clear()
        updateUI()
        saveData()
        Toast.makeText(this, "–í—Å—ë —Å–±—Ä–æ—à–µ–Ω–æ! üéØ", Toast.LENGTH_SHORT).show()
    }
}